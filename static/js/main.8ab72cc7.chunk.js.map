{"version":3,"sources":["pages/SensorTest.module.sass","logo.svg","pages/SensorTest.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","SensorTestPage","useState","stats","setStats","useEffect","video","document","querySelector","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","catch","err0r","console","log","className","s","wrapper","autoPlay","muted","playsInline","dev","onClick","DeviceMotionEvent","requestPermission","response","window","addEventListener","event","App","SensorTest","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,IAAM,0B,4HCD/C,I,mCC4EAC,MAxEf,WAA2B,IAAD,EAECC,mBAAS,MAFV,mBAElBC,EAFkB,KAEXC,EAFW,KA0DzB,OAtDAC,qBAAU,WAET,IAAIC,EAAQC,SAASC,cAAc,SAC/BC,UAAUC,cAAgBD,UAAUC,aAAaC,cACpDF,UAAUC,aAAaC,aAAa,CAAEL,MAAO,CAAEM,WAAY,iBACzDC,MAAK,SAAUC,GACfR,EAAMS,UAAYD,KAElBE,OAAM,SAAUC,GAChBC,QAAQC,IAAI,8BAIb,IA0CF,sBAAKC,UAAWC,IAAEC,QAAlB,UACC,uBAAOC,UAAU,EAAMC,OAAK,EAACC,aAAa,IAC1C,sBAAKL,UAAWC,IAAEK,IAAlB,UACC,qBAAKC,QA3CR,WACCC,kBAAkBC,oBAAoBhB,MAAK,SAAAiB,GAC1B,WAAZA,GAGHC,OAAOC,iBAAiB,qBAAoB,SAACC,GAC5C7B,EAAS6B,UAqCV,wBACA,8BACE9B,WCxDS+B,MARf,WACC,OACC,8BACC,cAACC,EAAD,OCKYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAM1BX,M","file":"static/js/main.8ab72cc7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SensorTest_wrapper__QAJOM\",\"dev\":\"SensorTest_dev__LyKGh\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from 'react'\n\nimport s from './SensorTest.module.sass'\n\nfunction SensorTestPage() {\n\n\tconst [stats, setStats] = useState(null)\n\n\tuseEffect(() => {\n\t\t// let video = document.createElement('video')\n\t\tlet video = document.querySelector('video')\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n\t\t\tnavigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n\t\t\t\t.then(function (stream) {\n\t\t\t\t\tvideo.srcObject = stream;\n\t\t\t\t})\n\t\t\t\t.catch(function (err0r) {\n\t\t\t\t\tconsole.log(\"Something went wrong!\");\n\t\t\t\t});\n\n\t\t}\n\t}, [])\n\n\tfunction getPermissions() {\n\t\tDeviceMotionEvent.requestPermission().then(response => {\n\t\t\tif (response == 'granted') {\n\t\t\t\t// Add a listener to get smartphone orientation\n\t\t\t\t// in the alpha-beta-gamma axes (units in degrees)\n\t\t\t\twindow.addEventListener('deviceorientation',(event) => {\n\t\t\t\t\tsetStats(event)\n\t\t\t\t\t// Expose each orientation angle in a more readable way\n\t\t\t\t\t// rotation_degrees = event.alpha;\n\t\t\t\t\t// frontToBack_degrees = event.beta;\n\t\t\t\t\t// leftToRight_degrees = event.gamma;\n\t\t\t\t\t//\n\t\t\t\t\t// // Update velocity according to how tilted the phone is\n\t\t\t\t\t// // Since phones are narrower than they are long, double the increase to the x velocity\n\t\t\t\t\t// vx = vx + leftToRight_degrees * updateRate*2;\n\t\t\t\t\t// vy = vy + frontToBack_degrees * updateRate;\n\t\t\t\t\t//\n\t\t\t\t\t// // Update position and clip it to bounds\n\t\t\t\t\t// px = px + vx*.5;\n\t\t\t\t\t// if (px > 98 || px < 0){\n\t\t\t\t\t// \tpx = Math.max(0, Math.min(98, px)) // Clip px between 0-98\n\t\t\t\t\t// \tvx = 0;\n\t\t\t\t\t// }\n\t\t\t\t\t//\n\t\t\t\t\t// py = py + vy*.5;\n\t\t\t\t\t// if (py > 98 || py < 0){\n\t\t\t\t\t// \tpy = Math.max(0, Math.min(98, py)) // Clip py between 0-98\n\t\t\t\t\t// \tvy = 0;\n\t\t\t\t\t// }\n\t\t\t\t\t//\n\t\t\t\t\t// dot = document.getElementsByClassName(\"indicatorDot\")[0]\n\t\t\t\t\t// dot.setAttribute('style', \"left:\" + (px) + \"%;\" +\n\t\t\t\t\t// \t\"top:\" + (py) + \"%;\");\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\treturn (\n\t\t<div className={s.wrapper}>\n\t\t\t<video autoPlay={true} muted playsInline={true} />\n\t\t\t<div className={s.dev}>\n\t\t\t\t<div onClick={getPermissions}>Dev Stats:</div>\n\t\t\t\t<div>\n\t\t\t\t\t{stats}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n\n}\n\nexport default SensorTestPage\n","import logo from './logo.svg'\nimport './App.css'\nimport SensorTestPage from \"./pages/SensorTest\"\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<SensorTestPage />\n\t\t</div>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}